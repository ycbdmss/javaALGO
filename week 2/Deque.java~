import java.util.Iterator;
import java.util.NoSuchElementException;

 @SuppressWarnings("unchecked")
public class Deque<Item> implements Iterable<Item> {
    private int N;
    public Node first;
    public Node last;
    
    private class Node {
        private Item item;
        private Node next;
        private Node prev;
        
    }
    
    public Deque() {
        first= null;
        last= null;
        N=0;
    }// construct an empty deque
    public boolean isEmpty(){
        return N==0;
    }// is the deque empty?
    public int size() {
        return N;
    }// return the number of items on the deque
    
    public void addFirst(Item item){
        Node f = new Node();
        f.item=item;
        
        f.next=first;
        if(N==0){
            last=f;
        }else{
        first.prev=f;
        }
        first=f;
        N++;
        
    }// insert the item at the front
    public void addLast(Item item) {
        Node f = new Node();
        f.item=item;
        if(N==0){
            first =f;
        }
        if(N>0){
        last.next=f;
        }
        f.prev=last;
        last=f;
        N++;
    }// insert the item at the end
    public Item removeFirst() {
        if (isEmpty()) throw new NoSuchElementException("Stack underflow");
        Item item = first.item;
        first= first.next;
        
        N--;
        if(N==0)
            last=null;
        else
            first.prev=null;
        return item;
    }// delete and return the item at the front
    public Item removeLast() {
        if (isEmpty()) throw new NoSuchElementException("Stack underflow");
        Item item = last.item;
        last=last.prev;
        N--;
        if(N==0)
            first=null;
        else
            last.next=null;
        return item;
    }// delete and return the item at the end
    public Iterator<Item> iterator(){
        return new ArrayIterator();
    }// return an iterator over items in order from front to end
    private class ArrayIterator implements Iterator<Item>
    {
        private Node current = first;
        public boolean hasNext()  { return current != null;                     }
        public void remove()      { throw new UnsupportedOperationException();  }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next; 
            return item;
        }
    }
    public static void main(String[] args){
        Deque <Integer> q = new Deque();
        
        
        for(int i=0; i<5;i++){
            q.addLast(i);            
        }
        for(int i=0; i<5;i++){
            StdOut.println(q.removeLast());            
        }
        StdOut.println(q.size());
         
        
    }// unit testing
}